
apply plugin: 'maven-publish'
apply plugin: 'com.github.alexfu.androidautoversion'
apply plugin: 'com.github.dcendents.android-maven'


def LIB_GROUP_ID = 'io.sweepr'
def LIB_ARTIFACT_ID = 'speedtest'
def LIB_VERSION = androidAutoVersion.versionName
group = 'io.sweepr'
version = androidAutoVersion.versionName

apply plugin: 'java'
targetCompatibility = '1.7'
sourceCompatibility = '1.7'

apply plugin: 'pmd'

pmd {
    toolVersion = '5.3.2'
    ruleSets = []
    ruleSetFiles = files('config/pmd/rulesets.xml')
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'fr.bmartel:http-endec:1.04'
    compile 'commons-net:commons-net:3.6'
    testCompile 'junit:junit:4.11'
    testCompile 'net.jodah:concurrentunit:0.4.2'
    testCompile 'com.googlecode.json-simple:json-simple:1.1.1'
    testCompile 'com.google.code.gson:gson:2.8.0'
}





Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions {
    doLast {
        println project.getConvention()
    }

}

task generateJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    destinationDir = file("./doc/")
}

compileJava {
    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

test {
    testLogging.showStandardStreams = true
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            /** Configure path of your package repository on Github
             ** Replace GITHUB_USERID with your/organisation Github userID
             ** and REPOSITORY with the repository name on GitHub
             */
            url = uri("https://maven.pkg.github.com/rosebud-iot/speed-test-lib")
            credentials {
                /** Create github.properties in root project folder file with
                 ** gpr.usr=GITHUB_USER_ID & gpr.key=PERSONAL_ACCESS_TOKEN
                 ** Set env variable GPR_USER & GPR_API_KEY if not adding a properties file**/

                username = System.getenv("GPR_USER")
                password = System.getenv("GPR_API_KEY")
            }
        }
    }

    publications {
        speedtestlib(MavenPublication) {
            groupId LIB_GROUP_ID
            artifactId LIB_ARTIFACT_ID
            version LIB_VERSION
            artifact(sourcesJar)

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
