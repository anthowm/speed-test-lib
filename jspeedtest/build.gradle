import com.amazonaws.auth.policy.Policy
import com.amazonaws.auth.policy.Principal
import com.amazonaws.auth.policy.Statement
import com.amazonaws.auth.policy.actions.S3Actions
import com.amazonaws.auth.policy.resources.S3BucketResource
import com.amazonaws.auth.policy.resources.S3ObjectResource
import jp.classmethod.aws.gradle.s3.BucketPolicyTask
import jp.classmethod.aws.gradle.s3.CreateBucketTask
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jp.classmethod.aws'
apply plugin: 'jp.classmethod.aws.s3'
apply plugin: 'com.novoda.bintray-release'

task create(type: CreateBucketTask) {
    bucketName "sweepr-partner-nexus-repository"
    region 'us-west-1'
    ifNotExists true
}

task setBucketPolicy(type: BucketPolicyTask, dependsOn: create) {
    bucketName "sweepr-partner-nexus-repository"
    policy new Policy().withStatements(
            new Statement(Statement.Effect.Allow)
                    .withPrincipals(Principal.AllUsers)
                    .withActions(S3Actions.GetObject)
                    .withResources(new S3ObjectResource("sweepr-partner-nexus-repository", '*')),
            new Statement(Statement.Effect.Allow)
                    .withPrincipals(Principal.AllUsers)
                    .withActions(S3Actions.ListObjects)
                    .withResources(new S3BucketResource("sweepr-partner-nexus-repository"))
    )
}
group 'fr.bmartel'
version '1.32.1'

apply plugin: 'java'
targetCompatibility = '1.7'
sourceCompatibility = '1.7'

apply plugin: 'pmd'

pmd {
    toolVersion = '5.3.2'
    ruleSets = []
    ruleSetFiles = files('config/pmd/rulesets.xml')
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'fr.bmartel:http-endec:1.04'
    compile 'commons-net:commons-net:3.6'
    testCompile 'junit:junit:4.11'
    testCompile 'net.jodah:concurrentunit:0.4.2'
    testCompile 'com.googlecode.json-simple:json-simple:1.1.1'
    testCompile 'com.google.code.gson:gson:2.8.0'
}

def siteUrl = 'https://github.com/bertrandmartel/speed-test-lib'
def gitUrl = 'https://github.com/bertrandmartel/speed-test-lib.git'

bintray {
    user = "$System.env.BINTRAY_USER"
    key = "$System.env.BINTRAY_KEY"

    configurations = ['archives'] //When uploading configuration files

    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload

    pkg {
        repo = 'maven'
        name = 'speedtest'
        desc = 'Speed Test library for Java/Android'
        websiteUrl = siteUrl
        issueTrackerUrl = 'https://github.com/bertrandmartel/speed-test-lib/issues'
        vcsUrl = gitUrl
        licenses = ['MIT']
        labels = ['speed-test', 'speedtest']
        publicDownloadNumbers = true

        version {
            name = project.version //Bintray logical version name
            vcsTag = project.version

            gpg {
                sign = true
                passphrase = "$System.env.GPG_PASSPHRASE"
            }

            mavenCentralSync {
                sync = true
                //Optional (true by default). Determines whether to sync the version to Maven Central.
                user = "$System.env.MAVEN_CENTRAL_USER_TOKEN" //OSS user token
                password = "$System.env.MAVEN_CENTRAL_PASSWORD" //OSS user password
                close = '1'
                //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}


Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions {
    doLast {
        println project.getConvention()
    }

}

task generateJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    destinationDir = file("./doc/")
}

compileJava {
    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

test {
    testLogging.showStandardStreams = true
}

publish {
    userOrg = ''
    groupId = 'com.sweepr'
    artifactId = 'networktest'
    publishVersion = '1.0.8'
    desc = 'Discovery UPnP devices via SSDP protocol'
    licences = ['MIT']
    uploadName = 'networktest'
    website = 'https://github.com/rosebud-iot/jspeedtest.git'
}

publishing {
    repositories {
        maven {
            url "s3://sweepr-partner-nexus-repository/releases"
            credentials(AwsCredentials) {
                accessKey awsCredentials.AWSAccessKeyId
                secretKey awsCredentials.AWSSecretKey
            }
        }
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
